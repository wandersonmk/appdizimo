// Teste completo do sistema de login ap√≥s setup do banco
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://neykfwokdjfcbkzhtazl.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5leWtmd29rZGpmY2Jremh0YXpsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyNzY4NzksImV4cCI6MjA2NTg1Mjg3OX0.NZJccP4zHWlclZWuJMzoyyjeA8wJC2UVZPfHXQ0DPCk'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

console.log('üß™ Testando sistema de login completo...\n')

async function testCompleteLoginSystem() {
  try {
    // 1. Verificar se a tabela usuarios existe
    console.log('1Ô∏è‚É£ Verificando tabela "usuarios"...')
    const { data: usuarios, error: usuariosError } = await supabase
      .from('usuarios')
      .select('count')
      .limit(1)

    if (usuariosError) {
      console.log('‚ùå Tabela "usuarios" n√£o encontrada:', usuariosError.message)
      console.log('üí° Execute o arquivo setup-database.sql no Supabase SQL Editor primeiro!')
      return
    }
    console.log('‚úÖ Tabela "usuarios" existe e √© acess√≠vel')

    // 2. Testar fluxo completo de registro
    console.log('\n2Ô∏è‚É£ Testando registro completo (signup + inser√ß√£o na tabela)...')
    const testUser = {
      email: 'teste@agzap.com',
      password: 'MinhaSenh@123',
      name: 'Usu√°rio Teste',
      companyName: 'Empresa Teste Ltda'
    }

    // Primeiro fazer signup no Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password
    })

    if (authError && !authError.message.includes('User already registered')) {
      console.log('‚ùå Erro no signup:', authError.message)
      return
    }

    if (authError && authError.message.includes('User already registered')) {
      console.log('‚ö†Ô∏è  Usu√°rio j√° existe, prosseguindo com teste de login...')
    } else {
      console.log('‚úÖ Signup no Auth realizado com sucesso')
      
      // Se o signup foi bem-sucedido e temos um usu√°rio, inserir na tabela
      if (authData.user) {
        console.log('üìù Inserindo dados do usu√°rio na tabela...')
        const { data: insertData, error: insertError } = await supabase
          .from('usuarios')
          .insert({
            nome: testUser.name,
            empresa: testUser.companyName,
            email: testUser.email,
            perfil: 'admin'
          })

        if (insertError) {
          console.log('‚ùå Erro ao inserir usu√°rio na tabela:', insertError.message)
        } else {
          console.log('‚úÖ Usu√°rio inserido na tabela com sucesso')
        }
      }
    }

    // 3. Testar login
    console.log('\n3Ô∏è‚É£ Testando login...')
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testUser.email,
      password: testUser.password
    })

    if (loginError) {
      console.log('‚ùå Erro no login:', loginError.message)
      return
    }

    console.log('‚úÖ Login realizado com sucesso!')
    console.log('üë§ Usu√°rio logado:', loginData.user?.email)

    // 4. Verificar se consegue acessar dados do usu√°rio
    console.log('\n4Ô∏è‚É£ Testando acesso aos dados do usu√°rio logado...')
    const { data: userData, error: userError } = await supabase
      .from('usuarios')
      .select('*')
      .eq('email', testUser.email)
      .single()

    if (userError) {
      console.log('‚ùå Erro ao acessar dados do usu√°rio:', userError.message)
      console.log('üí° Verifique se as pol√≠ticas RLS est√£o configuradas corretamente')
    } else {
      console.log('‚úÖ Dados do usu√°rio obtidos com sucesso:')
      console.log('   üìß Email:', userData.email)
      console.log('   üë§ Nome:', userData.nome)
      console.log('   üè¢ Empresa:', userData.empresa)
      console.log('   üé≠ Perfil:', userData.perfil)
    }

    // 5. Testar logout
    console.log('\n5Ô∏è‚É£ Testando logout...')
    const { error: logoutError } = await supabase.auth.signOut()
    
    if (logoutError) {
      console.log('‚ùå Erro no logout:', logoutError.message)
    } else {
      console.log('‚úÖ Logout realizado com sucesso!')
    }

    // 6. Verificar se n√£o consegue mais acessar dados ap√≥s logout
    console.log('\n6Ô∏è‚É£ Verificando seguran√ßa ap√≥s logout...')
    const { data: postLogoutData, error: postLogoutError } = await supabase
      .from('usuarios')
      .select('*')
      .eq('email', testUser.email)

    if (postLogoutError) {
      console.log('‚úÖ Seguran√ßa OK: N√£o consegue acessar dados ap√≥s logout')
    } else {
      console.log('‚ö†Ô∏è  Aviso: Ainda consegue acessar dados ap√≥s logout (verificar RLS)')
    }

    console.log('\nüéâ Teste completo finalizado!')
    console.log('\nüìã Resumo:')
    console.log('‚úÖ Conex√£o Supabase: OK')
    console.log('‚úÖ Auth (signup/login/logout): OK') 
    console.log('‚úÖ Tabela usuarios: OK')
    console.log('‚ùì Pol√≠ticas RLS: Verificar se funcionando')

  } catch (error) {
    console.error('‚ùå Erro cr√≠tico:', error.message)
  }
}

testCompleteLoginSystem()